// <auto-generated />
using System;
using Cnblogs.Fluss.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cnblogs.Fluss.Infrastructure.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20210125082538_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Cnblogs.Fluss.Domain.Entities.BlogPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AutoDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BlogId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExist")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId", "IsExist", "IsPublished", "DateCreated");

                    b.ToTable("blog_post");
                });

            modelBuilder.Entity("Cnblogs.Fluss.Domain.Entities.BlogSite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("HomePageSize")
                        .HasColumnType("int");

                    b.Property<bool>("IsExist")
                        .HasColumnType("bit");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("blog_site");
                });

            modelBuilder.Entity("Cnblogs.Fluss.Domain.Entities.ContentBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BlogId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsExist")
                        .HasColumnType("bit");

                    b.Property<string>("Raw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Refer")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("Refer");

                    b.ToTable("blog_content_block");
                });

            modelBuilder.Entity("Cnblogs.Fluss.Domain.Entities.PostContentRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("ContentBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsExist")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContentBlockId", "IsExist");

                    b.HasIndex("PostId", "IsExist");

                    b.ToTable("blog_post_content");
                });

            modelBuilder.Entity("Cnblogs.Fluss.Domain.Entities.BlogPost", b =>
                {
                    b.HasOne("Cnblogs.Fluss.Domain.Entities.BlogSite", "BlogSite")
                        .WithMany("BlogPosts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogSite");
                });

            modelBuilder.Entity("Cnblogs.Fluss.Domain.Entities.ContentBlock", b =>
                {
                    b.HasOne("Cnblogs.Fluss.Domain.Entities.BlogSite", "BlogSite")
                        .WithMany("ContentBlocks")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cnblogs.Fluss.Domain.Entities.ContentBlock", "ReferringBlock")
                        .WithMany()
                        .HasForeignKey("Refer")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BlogSite");

                    b.Navigation("ReferringBlock");
                });

            modelBuilder.Entity("Cnblogs.Fluss.Domain.Entities.PostContentRecord", b =>
                {
                    b.HasOne("Cnblogs.Fluss.Domain.Entities.ContentBlock", "ContentBlock")
                        .WithMany("PostContentRecords")
                        .HasForeignKey("ContentBlockId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Cnblogs.Fluss.Domain.Entities.BlogPost", "BlogPost")
                        .WithMany("ContentRecords")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("ContentBlock");
                });

            modelBuilder.Entity("Cnblogs.Fluss.Domain.Entities.BlogPost", b =>
                {
                    b.Navigation("ContentRecords");
                });

            modelBuilder.Entity("Cnblogs.Fluss.Domain.Entities.BlogSite", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("ContentBlocks");
                });

            modelBuilder.Entity("Cnblogs.Fluss.Domain.Entities.ContentBlock", b =>
                {
                    b.Navigation("PostContentRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
